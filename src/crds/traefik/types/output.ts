// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace traefik {
    export namespace v1alpha1 {
        /**
         * IngressRouteSpec is a specification for a IngressRouteSpec resource.
         */
        export interface IngressRouteSpec {
            entryPoints?: string[];
            routes: outputs.traefik.v1alpha1.IngressRouteSpecRoutes[];
            /**
             * TLS contains the TLS certificates configuration of the routes. To enable Let's Encrypt, use an empty TLS struct, e.g. in YAML: 
             *  	 tls: {} # inline format 
             *  	 tls: 	   secretName: # block format
             */
            tls?: outputs.traefik.v1alpha1.IngressRouteSpecTls;
        }

        /**
         * Route contains the set of routes.
         */
        export interface IngressRouteSpecRoutes {
            kind: string;
            match: string;
            middlewares?: outputs.traefik.v1alpha1.IngressRouteSpecRoutesMiddlewares[];
            priority?: number;
            services?: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServices[];
        }

        /**
         * MiddlewareRef is a ref to the Middleware resources.
         */
        export interface IngressRouteSpecRoutesMiddlewares {
            name: string;
            namespace?: string;
        }

        /**
         * Service defines an upstream to proxy traffic.
         */
        export interface IngressRouteSpecRoutesServices {
            kind?: string;
            /**
             * Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.
             */
            name: string;
            namespace?: string;
            passHostHeader?: boolean;
            port?: number | string;
            /**
             * ResponseForwarding holds configuration for the forward of the response.
             */
            responseForwarding?: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesResponseforwarding;
            scheme?: string;
            serversTransport?: string;
            /**
             * Sticky holds the sticky configuration.
             */
            sticky?: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesSticky;
            strategy?: string;
            /**
             * Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: number;
        }

        /**
         * ResponseForwarding holds configuration for the forward of the response.
         */
        export interface IngressRouteSpecRoutesServicesResponseforwarding {
            flushInterval?: string;
        }

        /**
         * Sticky holds the sticky configuration.
         */
        export interface IngressRouteSpecRoutesServicesSticky {
            /**
             * Cookie holds the sticky configuration based on cookie.
             */
            cookie?: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesStickyCookie;
        }

        /**
         * Cookie holds the sticky configuration based on cookie.
         */
        export interface IngressRouteSpecRoutesServicesStickyCookie {
            httpOnly?: boolean;
            name?: string;
            sameSite?: string;
            secure?: boolean;
        }

        /**
         * TLS contains the TLS certificates configuration of the routes. To enable Let's Encrypt, use an empty TLS struct, e.g. in YAML: 
         *  	 tls: {} # inline format 
         *  	 tls: 	   secretName: # block format
         */
        export interface IngressRouteSpecTls {
            certResolver?: string;
            domains?: outputs.traefik.v1alpha1.IngressRouteSpecTlsDomains[];
            /**
             * Options is a reference to a TLSOption, that specifies the parameters of the TLS connection.
             */
            options?: outputs.traefik.v1alpha1.IngressRouteSpecTlsOptions;
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName?: string;
            /**
             * Store is a reference to a TLSStore, that specifies the parameters of the TLS store.
             */
            store?: outputs.traefik.v1alpha1.IngressRouteSpecTlsStore;
        }

        /**
         * Domain holds a domain name with SANs.
         */
        export interface IngressRouteSpecTlsDomains {
            main?: string;
            sans?: string[];
        }

        /**
         * Options is a reference to a TLSOption, that specifies the parameters of the TLS connection.
         */
        export interface IngressRouteSpecTlsOptions {
            name: string;
            namespace?: string;
        }

        /**
         * Store is a reference to a TLSStore, that specifies the parameters of the TLS store.
         */
        export interface IngressRouteSpecTlsStore {
            name: string;
            namespace?: string;
        }

        /**
         * MiddlewareSpec holds the Middleware configuration.
         */
        export interface MiddlewareSpec {
            /**
             * AddPrefix holds the AddPrefix configuration.
             */
            addPrefix?: outputs.traefik.v1alpha1.MiddlewareSpecAddprefix;
            /**
             * BasicAuth holds the HTTP basic authentication configuration.
             */
            basicAuth?: outputs.traefik.v1alpha1.MiddlewareSpecBasicauth;
            /**
             * Buffering holds the request/response buffering configuration.
             */
            buffering?: outputs.traefik.v1alpha1.MiddlewareSpecBuffering;
            /**
             * Chain holds a chain of middlewares.
             */
            chain?: outputs.traefik.v1alpha1.MiddlewareSpecChain;
            /**
             * CircuitBreaker holds the circuit breaker configuration.
             */
            circuitBreaker?: outputs.traefik.v1alpha1.MiddlewareSpecCircuitbreaker;
            /**
             * Compress holds the compress configuration.
             */
            compress?: outputs.traefik.v1alpha1.MiddlewareSpecCompress;
            /**
             * ContentType middleware - or rather its unique `autoDetect` option - specifies whether to let the `Content-Type` header, if it has not been set by the backend, be automatically set to a value derived from the contents of the response. As a proxy, the default behavior should be to leave the header alone, regardless of what the backend did with it. However, the historic default was to always auto-detect and set the header if it was nil, and it is going to be kept that way in order to support users currently relying on it. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
             */
            contentType?: outputs.traefik.v1alpha1.MiddlewareSpecContenttype;
            /**
             * DigestAuth holds the Digest HTTP authentication configuration.
             */
            digestAuth?: outputs.traefik.v1alpha1.MiddlewareSpecDigestauth;
            /**
             * ErrorPage holds the custom error page configuration.
             */
            errors?: outputs.traefik.v1alpha1.MiddlewareSpecErrors;
            /**
             * ForwardAuth holds the http forward authentication configuration.
             */
            forwardAuth?: outputs.traefik.v1alpha1.MiddlewareSpecForwardauth;
            /**
             * Headers holds the custom header configuration.
             */
            headers?: outputs.traefik.v1alpha1.MiddlewareSpecHeaders;
            /**
             * InFlightReq limits the number of requests being processed and served concurrently.
             */
            inFlightReq?: outputs.traefik.v1alpha1.MiddlewareSpecInflightreq;
            /**
             * IPWhiteList holds the ip white list configuration.
             */
            ipWhiteList?: outputs.traefik.v1alpha1.MiddlewareSpecIpwhitelist;
            /**
             * PassTLSClientCert holds the TLS client cert headers configuration.
             */
            passTLSClientCert?: outputs.traefik.v1alpha1.MiddlewareSpecPasstlsclientcert;
            plugin?: {[key: string]: {[key: string]: any}};
            /**
             * RateLimit holds the rate limiting configuration for a given router.
             */
            rateLimit?: outputs.traefik.v1alpha1.MiddlewareSpecRatelimit;
            /**
             * RedirectRegex holds the redirection configuration.
             */
            redirectRegex?: outputs.traefik.v1alpha1.MiddlewareSpecRedirectregex;
            /**
             * RedirectScheme holds the scheme redirection configuration.
             */
            redirectScheme?: outputs.traefik.v1alpha1.MiddlewareSpecRedirectscheme;
            /**
             * ReplacePath holds the ReplacePath configuration.
             */
            replacePath?: outputs.traefik.v1alpha1.MiddlewareSpecReplacepath;
            /**
             * ReplacePathRegex holds the ReplacePathRegex configuration.
             */
            replacePathRegex?: outputs.traefik.v1alpha1.MiddlewareSpecReplacepathregex;
            /**
             * Retry holds the retry configuration.
             */
            retry?: outputs.traefik.v1alpha1.MiddlewareSpecRetry;
            /**
             * StripPrefix holds the StripPrefix configuration.
             */
            stripPrefix?: outputs.traefik.v1alpha1.MiddlewareSpecStripprefix;
            /**
             * StripPrefixRegex holds the StripPrefixRegex configuration.
             */
            stripPrefixRegex?: outputs.traefik.v1alpha1.MiddlewareSpecStripprefixregex;
        }

        /**
         * AddPrefix holds the AddPrefix configuration.
         */
        export interface MiddlewareSpecAddprefix {
            prefix?: string;
        }

        /**
         * BasicAuth holds the HTTP basic authentication configuration.
         */
        export interface MiddlewareSpecBasicauth {
            headerField?: string;
            realm?: string;
            removeHeader?: boolean;
            secret?: string;
        }

        /**
         * Buffering holds the request/response buffering configuration.
         */
        export interface MiddlewareSpecBuffering {
            maxRequestBodyBytes?: number;
            maxResponseBodyBytes?: number;
            memRequestBodyBytes?: number;
            memResponseBodyBytes?: number;
            retryExpression?: string;
        }

        /**
         * Chain holds a chain of middlewares.
         */
        export interface MiddlewareSpecChain {
            middlewares?: outputs.traefik.v1alpha1.MiddlewareSpecChainMiddlewares[];
        }

        /**
         * MiddlewareRef is a ref to the Middleware resources.
         */
        export interface MiddlewareSpecChainMiddlewares {
            name: string;
            namespace?: string;
        }

        /**
         * CircuitBreaker holds the circuit breaker configuration.
         */
        export interface MiddlewareSpecCircuitbreaker {
            expression?: string;
        }

        /**
         * Compress holds the compress configuration.
         */
        export interface MiddlewareSpecCompress {
            excludedContentTypes?: string[];
            minResponseBodyBytes?: number;
        }

        /**
         * ContentType middleware - or rather its unique `autoDetect` option - specifies whether to let the `Content-Type` header, if it has not been set by the backend, be automatically set to a value derived from the contents of the response. As a proxy, the default behavior should be to leave the header alone, regardless of what the backend did with it. However, the historic default was to always auto-detect and set the header if it was nil, and it is going to be kept that way in order to support users currently relying on it. This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
         */
        export interface MiddlewareSpecContenttype {
            autoDetect?: boolean;
        }

        /**
         * DigestAuth holds the Digest HTTP authentication configuration.
         */
        export interface MiddlewareSpecDigestauth {
            headerField?: string;
            realm?: string;
            removeHeader?: boolean;
            secret?: string;
        }

        /**
         * ErrorPage holds the custom error page configuration.
         */
        export interface MiddlewareSpecErrors {
            query?: string;
            /**
             * Service defines an upstream to proxy traffic.
             */
            service?: outputs.traefik.v1alpha1.MiddlewareSpecErrorsService;
            status?: string[];
        }

        /**
         * Service defines an upstream to proxy traffic.
         */
        export interface MiddlewareSpecErrorsService {
            kind?: string;
            /**
             * Name is a reference to a Kubernetes Service object (for a load-balancer of servers), or to a TraefikService object (service load-balancer, mirroring, etc). The differentiation between the two is specified in the Kind field.
             */
            name: string;
            namespace?: string;
            passHostHeader?: boolean;
            port?: number | string;
            /**
             * ResponseForwarding holds configuration for the forward of the response.
             */
            responseForwarding?: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceResponseforwarding;
            scheme?: string;
            serversTransport?: string;
            /**
             * Sticky holds the sticky configuration.
             */
            sticky?: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceSticky;
            strategy?: string;
            /**
             * Weight should only be specified when Name references a TraefikService object (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: number;
        }

        /**
         * ResponseForwarding holds configuration for the forward of the response.
         */
        export interface MiddlewareSpecErrorsServiceResponseforwarding {
            flushInterval?: string;
        }

        /**
         * Sticky holds the sticky configuration.
         */
        export interface MiddlewareSpecErrorsServiceSticky {
            /**
             * Cookie holds the sticky configuration based on cookie.
             */
            cookie?: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceStickyCookie;
        }

        /**
         * Cookie holds the sticky configuration based on cookie.
         */
        export interface MiddlewareSpecErrorsServiceStickyCookie {
            httpOnly?: boolean;
            name?: string;
            sameSite?: string;
            secure?: boolean;
        }

        /**
         * ForwardAuth holds the http forward authentication configuration.
         */
        export interface MiddlewareSpecForwardauth {
            address?: string;
            authRequestHeaders?: string[];
            authResponseHeaders?: string[];
            authResponseHeadersRegex?: string;
            /**
             * ClientTLS holds TLS specific configurations as client.
             */
            tls?: outputs.traefik.v1alpha1.MiddlewareSpecForwardauthTls;
            trustForwardHeader?: boolean;
        }

        /**
         * ClientTLS holds TLS specific configurations as client.
         */
        export interface MiddlewareSpecForwardauthTls {
            caOptional?: boolean;
            caSecret?: string;
            certSecret?: string;
            insecureSkipVerify?: boolean;
        }

        /**
         * Headers holds the custom header configuration.
         */
        export interface MiddlewareSpecHeaders {
            /**
             * AccessControlAllowCredentials is only valid if true. false is ignored.
             */
            accessControlAllowCredentials?: boolean;
            /**
             * AccessControlAllowHeaders must be used in response to a preflight request with Access-Control-Request-Headers set.
             */
            accessControlAllowHeaders?: string[];
            /**
             * AccessControlAllowMethods must be used in response to a preflight request with Access-Control-Request-Method set.
             */
            accessControlAllowMethods?: string[];
            /**
             * AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin "*".
             */
            accessControlAllowOriginList?: string[];
            /**
             * AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).
             */
            accessControlAllowOriginListRegex?: string[];
            /**
             * AccessControlExposeHeaders sets valid headers for the response.
             */
            accessControlExposeHeaders?: string[];
            /**
             * AccessControlMaxAge sets the time that a preflight request may be cached.
             */
            accessControlMaxAge?: number;
            /**
             * AddVaryHeader controls if the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.
             */
            addVaryHeader?: boolean;
            allowedHosts?: string[];
            browserXssFilter?: boolean;
            contentSecurityPolicy?: string;
            contentTypeNosniff?: boolean;
            customBrowserXSSValue?: string;
            customFrameOptionsValue?: string;
            customRequestHeaders?: {[key: string]: string};
            customResponseHeaders?: {[key: string]: string};
            /**
             * Deprecated: use PermissionsPolicy instead.
             */
            featurePolicy?: string;
            forceSTSHeader?: boolean;
            frameDeny?: boolean;
            hostsProxyHeaders?: string[];
            isDevelopment?: boolean;
            permissionsPolicy?: string;
            publicKey?: string;
            referrerPolicy?: string;
            /**
             * Deprecated: use RedirectRegex instead.
             */
            sslForceHost?: boolean;
            /**
             * Deprecated: use RedirectRegex instead.
             */
            sslHost?: string;
            sslProxyHeaders?: {[key: string]: string};
            /**
             * Deprecated: use EntryPoint redirection or RedirectScheme instead.
             */
            sslRedirect?: boolean;
            /**
             * Deprecated: use EntryPoint redirection or RedirectScheme instead.
             */
            sslTemporaryRedirect?: boolean;
            stsIncludeSubdomains?: boolean;
            stsPreload?: boolean;
            stsSeconds?: number;
        }

        /**
         * InFlightReq limits the number of requests being processed and served concurrently.
         */
        export interface MiddlewareSpecInflightreq {
            amount?: number;
            /**
             * SourceCriterion defines what criterion is used to group requests as originating from a common source. If none are set, the default is to use the request's remote address field. All fields are mutually exclusive.
             */
            sourceCriterion?: outputs.traefik.v1alpha1.MiddlewareSpecInflightreqSourcecriterion;
        }

        /**
         * SourceCriterion defines what criterion is used to group requests as originating from a common source. If none are set, the default is to use the request's remote address field. All fields are mutually exclusive.
         */
        export interface MiddlewareSpecInflightreqSourcecriterion {
            /**
             * IPStrategy holds the ip strategy configuration.
             */
            ipStrategy?: outputs.traefik.v1alpha1.MiddlewareSpecInflightreqSourcecriterionIpstrategy;
            requestHeaderName?: string;
            requestHost?: boolean;
        }

        /**
         * IPStrategy holds the ip strategy configuration.
         */
        export interface MiddlewareSpecInflightreqSourcecriterionIpstrategy {
            depth?: number;
            excludedIPs?: string[];
        }

        /**
         * IPWhiteList holds the ip white list configuration.
         */
        export interface MiddlewareSpecIpwhitelist {
            /**
             * IPStrategy holds the ip strategy configuration.
             */
            ipStrategy?: outputs.traefik.v1alpha1.MiddlewareSpecIpwhitelistIpstrategy;
            sourceRange?: string[];
        }

        /**
         * IPStrategy holds the ip strategy configuration.
         */
        export interface MiddlewareSpecIpwhitelistIpstrategy {
            depth?: number;
            excludedIPs?: string[];
        }

        /**
         * PassTLSClientCert holds the TLS client cert headers configuration.
         */
        export interface MiddlewareSpecPasstlsclientcert {
            /**
             * TLSClientCertificateInfo holds the client TLS certificate info configuration.
             */
            info?: outputs.traefik.v1alpha1.MiddlewareSpecPasstlsclientcertInfo;
            pem?: boolean;
        }

        /**
         * TLSClientCertificateInfo holds the client TLS certificate info configuration.
         */
        export interface MiddlewareSpecPasstlsclientcertInfo {
            /**
             * TLSClientCertificateIssuerDNInfo holds the client TLS certificate distinguished name info configuration. cf https://tools.ietf.org/html/rfc3739
             */
            issuer?: outputs.traefik.v1alpha1.MiddlewareSpecPasstlsclientcertInfoIssuer;
            notAfter?: boolean;
            notBefore?: boolean;
            sans?: boolean;
            serialNumber?: boolean;
            /**
             * TLSClientCertificateSubjectDNInfo holds the client TLS certificate distinguished name info configuration. cf https://tools.ietf.org/html/rfc3739
             */
            subject?: outputs.traefik.v1alpha1.MiddlewareSpecPasstlsclientcertInfoSubject;
        }

        /**
         * TLSClientCertificateIssuerDNInfo holds the client TLS certificate distinguished name info configuration. cf https://tools.ietf.org/html/rfc3739
         */
        export interface MiddlewareSpecPasstlsclientcertInfoIssuer {
            commonName?: boolean;
            country?: boolean;
            domainComponent?: boolean;
            locality?: boolean;
            organization?: boolean;
            province?: boolean;
            serialNumber?: boolean;
        }

        /**
         * TLSClientCertificateSubjectDNInfo holds the client TLS certificate distinguished name info configuration. cf https://tools.ietf.org/html/rfc3739
         */
        export interface MiddlewareSpecPasstlsclientcertInfoSubject {
            commonName?: boolean;
            country?: boolean;
            domainComponent?: boolean;
            locality?: boolean;
            organization?: boolean;
            organizationalUnit?: boolean;
            province?: boolean;
            serialNumber?: boolean;
        }

        /**
         * RateLimit holds the rate limiting configuration for a given router.
         */
        export interface MiddlewareSpecRatelimit {
            average?: number;
            burst?: number;
            period?: number | string;
            /**
             * SourceCriterion defines what criterion is used to group requests as originating from a common source. If none are set, the default is to use the request's remote address field. All fields are mutually exclusive.
             */
            sourceCriterion?: outputs.traefik.v1alpha1.MiddlewareSpecRatelimitSourcecriterion;
        }

        /**
         * SourceCriterion defines what criterion is used to group requests as originating from a common source. If none are set, the default is to use the request's remote address field. All fields are mutually exclusive.
         */
        export interface MiddlewareSpecRatelimitSourcecriterion {
            /**
             * IPStrategy holds the ip strategy configuration.
             */
            ipStrategy?: outputs.traefik.v1alpha1.MiddlewareSpecRatelimitSourcecriterionIpstrategy;
            requestHeaderName?: string;
            requestHost?: boolean;
        }

        /**
         * IPStrategy holds the ip strategy configuration.
         */
        export interface MiddlewareSpecRatelimitSourcecriterionIpstrategy {
            depth?: number;
            excludedIPs?: string[];
        }

        /**
         * RedirectRegex holds the redirection configuration.
         */
        export interface MiddlewareSpecRedirectregex {
            permanent?: boolean;
            regex?: string;
            replacement?: string;
        }

        /**
         * RedirectScheme holds the scheme redirection configuration.
         */
        export interface MiddlewareSpecRedirectscheme {
            permanent?: boolean;
            port?: string;
            scheme?: string;
        }

        /**
         * ReplacePath holds the ReplacePath configuration.
         */
        export interface MiddlewareSpecReplacepath {
            path?: string;
        }

        /**
         * ReplacePathRegex holds the ReplacePathRegex configuration.
         */
        export interface MiddlewareSpecReplacepathregex {
            regex?: string;
            replacement?: string;
        }

        /**
         * Retry holds the retry configuration.
         */
        export interface MiddlewareSpecRetry {
            attempts?: number;
            initialInterval?: number | string;
        }

        /**
         * StripPrefix holds the StripPrefix configuration.
         */
        export interface MiddlewareSpecStripprefix {
            forceSlash?: boolean;
            prefixes?: string[];
        }

        /**
         * StripPrefixRegex holds the StripPrefixRegex configuration.
         */
        export interface MiddlewareSpecStripprefixregex {
            regex?: string[];
        }

    }
}
